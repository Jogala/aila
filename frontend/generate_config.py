#!/usr/bin/env python3
"""
Generate frontend configuration from environment variables.

USAGE:
    Run this script from the project root directory:
    python generate_config.py

REQUIREMENTS:
    - Must be run from the project root (where .env file is located)
    - AILA_API_FAST_API_PORT must be set in .env file
    - AILA_FAST_API_HOST is optional (defaults to localhost)

This script will create/update frontend/config.js with current environment settings.
"""

import os
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv


def generate_frontend_config() -> None:
    # Load environment variables from .env if it exists (for local development)
    env_file_path = Path(".env")
    if env_file_path.exists():
        print(f"üìÅ Loading .env file from {env_file_path.absolute()}")
        load_dotenv(env_file_path)
    else:
        print("üìÅ No .env file found, using system environment variables (normal for production/Railway)")
        # In production/Railway, environment variables are set directly by the platform

    # Get environment type
    environment = os.getenv("AILA_ENVIRONMENT", "development")
    # Frontend request timeout for long-running analysis (ms)
    request_timeout_ms = int(os.getenv("AILA_FRONTEND_REQUEST_TIMEOUT_MS", "120000"))
    
    # Get configuration values based on environment
    if environment == "development":
        # Local development - use localhost
        api_port = os.getenv("AILA_API_FAST_API_PORT", "8000")
        api_host = os.getenv("AILA_FAST_API_HOST", "localhost")
        api_base_url = f"http://{api_host}:{api_port}"
    else:
        # Railway deployment (staging/production) - use relative URLs or detect dynamically
        railway_url = os.getenv("RAILWAY_STATIC_URL") or os.getenv("RAILWAY_PUBLIC_DOMAIN")
        if railway_url:
            api_base_url = f"https://{railway_url}"
        else:
            # Fallback: use relative URLs (same origin)
            api_base_url = ""  # Empty means same origin
    
    print(f"üîß Environment: {environment}")
    print(f"üîß API Base URL: {api_base_url}")

    # Generate config.js content
    config_content = f"""// Frontend configuration - Auto-generated from environment
// Generated by generate_config.py - Do not edit manually

window.APP_CONFIG = {{
    API_BASE_URL: '{api_base_url}',
    API_VERSION: 'v1',
    DEFAULT_MODEL: 'claude-3-5-haiku-20241022',
    DEFAULT_TEMPERATURE: 0.1,
    REQUEST_TIMEOUT_MS: {request_timeout_ms},
    
    // Environment info
    ENVIRONMENT: '{environment}',
    GENERATED_AT: '{datetime.now().isoformat()}'
}};

console.log('Frontend config loaded:', window.APP_CONFIG);
"""

    # Write to frontend/static directory for deployment setup
    static_dir = Path("frontend") / "static"
    static_dir.mkdir(exist_ok=True)

    config_path = static_dir / "config.js"
    with open(config_path, "w") as f:
        f.write(config_content)

    print(f"‚úÖ Generated frontend config: {config_path}")
    print(f"   API Base URL: {api_base_url}")
    print(f"   Environment: {os.getenv('ENVIRONMENT', 'development')}")


if __name__ == "__main__":
    generate_frontend_config()
